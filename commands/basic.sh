npm i dotenv mongoose express cors && touch .gitignore README.md .env && read -p "PORT: " port && read -p "CORS origin: " cors && read -p "MongoDB connection uri: " mongoUri && read -p "MongoDB database name: " dbname && echo "PORT=$port
MONGODB_URI = $mongoUri
CORS_ORIGIN = $cors" > .env  && mkdir public src && cd public && mkdir temp && cd temp && touch .gitkeep && cd ../.. && cd src && touch index.js constants.js app.js && echo "export const DB_NAME = \"$dbname\"" > constants.js && mkdir controllers middlewares utils routes db models && cd utils && touch asyncHandler.js ApiErrorRes.js && echo 'const asyncHandler = (requestHandler) => {
    return (req, res, next) => {
        Promise.resolve(requestHandler(req, res, next)).catch((err) => next(err))
    }
}

export { asyncHandler }' > asyncHandler.js && echo 'class ApiError extends Error {
    constructor(
        statusCode,
        messege= "Something went wrong",
        errors = [],
        stack = ""
    ){
        super(messege)
        this.statusCode = statusCode
        this.data = null
        this.messege = messege
        this.success = false
        this.error = errors

        if(stack) {
            this.stack = stack
        } else {
            Error.captureStackTrace(this, this.contructor)
        }
    }
}

class ApiResponse {
    constructor( statusCode, data, messege="Success"){
        this.statusCode = statusCode
        this.data = data
        this.messege = messege
        this.success = statusCode < 400
    }
}

export { ApiError, ApiResponse }' > ApiErrorRes.js && cd ../db && touch index.js && echo 'import mongoose from "mongoose";
import { DB_NAME } from "../constants.js";

const connectDB = async () => {
    try {
        const connectionInstance = await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`)
        console.log(`Mongodb connected !!\n DB Host ${connectionInstance.connection.host}`)
    } catch (err) {
        console.log(`MongoDB connection failed`,err);
        process.exit(1);
    }
}

export default connectDB' > index.js && cd .. && echo 'import express from "express";
import cors from "cors"

const app = express()

app.use(cors({
    origin: process.env.CORS_ORIGIN,
    credentials: true,
}))

app.use(express.json({limit:"16kb"}))
app.use(express.urlencoded({extended:true, limit: "16kb"}))
app.use(express.static("public"))

//import routes here

//routes use declaration

export { app }' > app.js && echo 'import dotenv from "dotenv"
import connectDB from "./db/index.js";
import { app } from "./app.js"

dotenv.config()

connectDB()
.then( () => {
    app.listen(process.env.PORT || 8000, () => {
        console.log(`Sever is live at port: ${process.env.PORT}`)
    })
})
.catch ( (error) => {
    console.log(`MongoDB connection failed`)
})' > index.js && cd .. && echo '# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

node_modules
./node_modules/*
.env
./.env
./*.env

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.production

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# End of https://mrkandreev.name/snippets/gitignore-generator/#Node' > .gitignore && sed -i 's/"scripts": {/"scripts": { "dev": "nodemon src\/index.js",/g' "package.json" && sed -i 's/"name"/"type": "module", "name"/g' "package.json"